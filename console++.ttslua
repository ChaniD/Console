#include console

console.seperator = '/'
console.option    = '-'
console.cd = console.seperator
console.value_bb = '[CCCCFF]'

console.builtin_globals = {}
for global, _ in pairs(_G) do console.builtin_globals[global] = true end

console.add_validation_function(function (message)
    local message = message:lower()
    for i, bad_word in pairs({'fuck', 'cunt'}) do
        if message:find(bad_word) then
            return false, "No swearing!"
        end
    end
    return true
end)

function console.fill_path(path)
    if path == nil then
        return console.cd
    elseif path:sub(1,1) == console.seperator then
        return path
    else
        return console.cd .. path
    end
end

function console.node_from_path(path)
    local node = _G
    local id = {''}
    local parent = {nil}
    local found = true
    local depth = 0
    local stack = {}
    if path ~= console.seperator then
        for i, part in ipairs(console.split(path, console.seperator)) do
            if part == '..' then
                if depth > 0 then
                    node = table.remove(parent)
                    table.remove(id)
                    table.remove(stack)
                    depth = depth - 1
                end
            elseif node[part] ~= nil then
                table.insert(parent, node)
                table.insert(id, part)
                table.insert(stack, part)
                node = node[part]
                depth = depth + 1
            else
                table.insert(id, part)
                found = false
                break
            end
        end
    end
    path = console.seperator
    for i, part in ipairs(stack) do
        path = path .. part .. console.seperator
    end
    return node, table.remove(id), table.remove(parent), found, path
end

function console.display_prompt(player)
    printToColor(console.cd .. ' ' .. console.command_char..console.command_char, player.color, console.prompt_color)
end

console.add_command('cd', true,
    console.header_bb .. 'cd [<table>][-]\nDisplay current table or change current table',
    function (player, path)
        if path == nil then
            return console.cd
        end
        local location = console.fill_path(path)
        local node, id, parent, found, location = console.node_from_path(location)
        local text = nil
        if node ~= nil and found and type(node) == 'table' then
            console.cd = location
            if not console.in_command_mode[player.steam_id] then text = console.cd end
        else
            text = console.error_bb .. '<not found>[-]'
        end
        return text, false
    end
)

console.add_command('ls', true,
    console.header_bb .. 'ls [<table>][-]\nDisplay variables in current table or specified table',
    function (player, ...)
        local path = console.cd
        local text = ''
        local display_functions = false
        local display_objects = false
        local display_variables = false
        local display_tables = false
        for i, arg in ipairs({...}) do
            if arg:sub(1,1) == console.option then
                if arg:len() > 1 then
                    for c = 2, arg:len() do
                        local option = arg:sub(c,c)
                        if option == 'f' then
                            display_functions = true
                        elseif option == 'o' then
                            display_objects = true
                        elseif option == 'v' then
                            display_variables = true
                        elseif option == 't' then
                            display_tables = true
                        else
                            text = text .. console.error_bb .. "<option '" .. console.option .. option .. "' not recognized>[-]\n"
                        end
                    end
                end
            else
                path = arg
            end
        end
        if display_tables then
            display_functions = false
            display_objects = false
            display_variables = false
        elseif not (display_functions or display_objects or display_variables) then
            display_variables = true
        end
        local location = console.fill_path(path)
        local node, id, parent, found, location = console.node_from_path(location)
        if node ~= nil and found then
            if type(node) == 'table' then
                local tables = {}
                local entries = {}
                for k, v in pairs(node) do
                    if node ~= _G or not console.builtin_globals[k] then
                        if type(v) == 'table' then
                            table.insert(tables, console.header_bb .. k .. '[-]')
                        else
                            if type(v) == 'function' and not display_function then
                                v = nil
                            elseif type(v) == 'userdata' then
                                if display_objects then
                                    v = v.tag
                                else
                                    v = nil
                                end
                            elseif not display_variables then
                                v = nil
                            elseif type(v) == 'boolean' then
                                if v then
                                    v = 'true'
                                else
                                    v = 'false'
                                end
                            end
                            if v ~= nil then
                                table.insert(entries, k .. ': ' .. console.value_bb .. v .. '[-]')
                            end
                        end
                    end
                end
                table.sort(tables)
                table.sort(entries)
                local cr = ''
                for _, table in ipairs(tables) do
                    text = text .. cr .. table .. console.seperator
                    cr = '\n'
                end
                for _, entry in ipairs(entries) do
                    text = text .. cr .. entry
                    cr = '\n'
                end
            elseif type(node) == 'boolean' then
                if node then
                    text = id .. ': ' .. console.value_bb .. 'true[-]'
                else
                    text = id .. ': ' .. console.value_bb .. 'false[-]'
                end
            elseif type(node) ~= 'function' then
                text = id .. ': ' .. console.value_bb .. node .. '[-]'
            end
        else
            text = console.error_bb .. '<not found>[-]'
        end
        return text
    end
)
console.add_command('dir', true, console.header_bb .. 'dir [<table>][-]\nDisplay variables in current table or specified table', 'ls')

console.add_command('set', true,
    console.header_bb .. 'set <variable> <value>[-]\nSet variable to value',
    function (player, variable, value)
        if variable == nil then
            return console.error_bb .. '<you must supply variable and new value>'
        end
        if value == nil then
            return console.error_bb .. '<you must supply new value>'
        end
        local variable = console.fill_path(variable)
        local node, id, parent, found = console.node_from_path(variable)
        local text = ''
        if node ~= nil and found then
            if type(node) == 'table' then
                text = console.error_bb .. '<cannot set table>[-]'
            elseif type(node) == 'function' then
                text = console.error_bb .. '<cannot set function>[-]'
            elseif type(node) == 'boolean' then
                if not value or tostring(value):lower() == 'false' then
                    parent[id] = false
                    text = id .. ': ' .. console.value_bb .. 'false[-]'
                else
                    parent[id] = true
                    text = id .. ': ' .. console.value_bb .. 'true[-]'
                end
            else
                parent[id] = value
                text = id .. ': ' .. console.value_bb .. parent[id] .. '[-]'
            end
        else
            text = console.error_bb .. '<not found>[-]'
        end
        return text
    end
)

console.add_command('toggle', true,
    console.header_bb .. 'toggle <boolean>[-]\nToggles a boolean variable',
    function (player, variable)
        if variable == nil then
            return console.error_bb .. '<you must supply variable>'
        end
        local variable = console.fill_path(variable)
        local node, id, parent, found = console.node_from_path(variable)
        local text = ''
        if node ~= nil and found then
            if type(node) == 'boolean' then
                if node then
                    parent[id] = false
                    text = id .. ': ' .. console.value_bb .. 'false[-]'
                else
                    parent[id] = true
                    text = id .. ': ' .. console.value_bb .. 'true[-]'
                end
            else
                text = console.error_bb .. '<can only toggle a boolean>[-]'
            end
        else
            text = console.error_bb .. '<not found>[-]'
        end
        return text
    end
)
console.add_command('tgl', true, console.header_bb .. 'tgl <boolean>[-]\nToggles a boolean variable', 'toggle')

console.add_command('rm', true,
    console.header_bb .. 'rm <variable>[-]\nRemove variable',
    function (player, variable)
        if variable == nil then
            return console.error_bb .. '<you must supply variable>'
        end
        local variable = console.fill_path(variable)
        local node, id, parent, found = console.node_from_path(variable)
        local text = ''
        if node ~= nil and found then
            parent[id] = nil
            text = id .. " removed!"
        else
            text = console.error_bb .. '<not found>[-]'
        end
        return text
    end
)
console.add_command('del', true, console.header_bb .. 'del <variable>[-]\nRemove variable', 'rm')

console.add_command('add', true,
    console.header_bb .. 'add <variable> [<value>|{}][-]\nCreate a variable set to value.  Use {} for value to make a table.',
    function (player, variable, value)
        if variable == nil then
            return console.error_bb .. '<you must supply variable>[-]'
        end
        if value == nil then
            return console.error_bb .. '<you must supply value>[-]'
        end
        local variable = console.fill_path(variable)
        local node, id, parent, found = console.node_from_path(variable)
        local text = ''
        if found then
            return console.error_bb .. '<already exists>[-]'
        elseif node == nil or id == '' then
            text = console.error_bb .. '<not found>[-]'
        else
            if value == '{}' then
                node[id] = {}
            else
                node[id] = value
            end
            text = id .. " created!"
        end
        return text
    end
)


console.add_command('shout', false,
    console.header_bb .. 'shout <text>[-]\nBroadcast <text> to all players. Specify colour with {RRGGBB}.',
    function (player, ...)
        local text = player.steam_name .. ': '
        local space = ''
        for _, word in ipairs({...}) do
            text = text .. space .. word
            space = ' '
        end
        text = text:gsub('{','[')
        text = text:gsub('}',']')
        broadcastToAll(text, stringColorToRGB(player.color))
        return nil, false
    end
)
